{"meta":{"title":"Yu Hanqing's Blog","subtitle":null,"description":null,"author":"Yu Hanqing","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-10-28T08:11:52.236Z","updated":"2019-10-28T08:11:52.236Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":"404 Page 404 找不到页面 返回上一页 返回首页"},{"title":"关于","date":"2020-02-28T03:11:20.000Z","updated":"2020-02-28T06:07:16.163Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"作者：Yu Hanqing github: https://github.com/iqhy"},{"title":"文章分类","date":"2019-10-28T07:29:43.000Z","updated":"2020-02-28T06:04:21.234Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-24T15:22:28.000Z","updated":"2020-02-28T06:05:20.339Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-10-28T08:09:04.522Z","updated":"2019-02-14T22:23:50.000Z","comments":true,"path":"404_css/style.css","permalink":"http://yoursite.com/404_css/style.css","excerpt":"","text":"body { background-color: #2F3242; } svg { position: absolute; top: 50%; left: 50%; margin-top: -250px; margin-left: -400px; } .message-box { height: 200px; width: 380px; position: absolute; top: 50%; left: 50%; margin-top: -100px; margin-left: 50px; color: #FFF; font-family: Roboto; font-weight: 300; } .message-box h1 { font-size: 60px; line-height: 46px; margin-bottom: 40px; } .buttons-con .action-link-wrap { margin-top: 40px; } .buttons-con .action-link-wrap a { background: #68c950; padding: 8px 25px; border-radius: 4px; color: #FFF; font-weight: bold; font-size: 14px; transition: all 0.3s linear; cursor: pointer; text-decoration: none; margin-right: 10px } .buttons-con .action-link-wrap a:hover { background: #5A5C6C; color: #fff; } #Polygon-1 , #Polygon-2 , #Polygon-3 , #Polygon-4 , #Polygon-4, #Polygon-5 { -webkit-animation: float 1s infinite ease-in-out alternate; animation: float 1s infinite ease-in-out alternate; } #Polygon-2 { -webkit-animation-delay: .2s; animation-delay: .2s; } #Polygon-3 { -webkit-animation-delay: .4s; animation-delay: .4s; } #Polygon-4 { -webkit-animation-delay: .6s; animation-delay: .6s; } #Polygon-5 { -webkit-animation-delay: .8s; animation-delay: .8s; } @-webkit-keyframes float { 100% { -webkit-transform: translateY(20px); transform: translateY(20px); } } @keyframes float { 100% { -webkit-transform: translateY(20px); transform: translateY(20px); } } @media (max-width: 450px) { svg { position: absolute; top: 50%; left: 50%; margin-top: -250px; margin-left: -190px; } .message-box { top: 50%; left: 50%; margin-top: -100px; margin-left: -190px; text-align: center; } }"}],"posts":[{"title":"Python 调用 C++","slug":"Python 调用 C++","date":"2020-02-28T07:56:00.000Z","updated":"2020-02-28T12:04:28.437Z","comments":true,"path":"2020/02/28/Python 调用 C++/","link":"","permalink":"http://yoursite.com/2020/02/28/Python%20%E8%B0%83%E7%94%A8%20C++/","excerpt":"Python 的代码优雅而实用，但是经常会遇到性能问题，这时可以使用 C/C++ 重写几个函数来解决，这样就同时兼顾了开发效率和性能。","text":"Python 的代码优雅而实用，但是经常会遇到性能问题，这时可以使用 C/C++ 重写几个函数来解决，这样就同时兼顾了开发效率和性能。 本文使用分为3个部分 安装 Cython (注意区别 CPython) Python 调用 C++ 函数 Python 调用 C++ 类 安装 Cython安装 Cython 最简单方法的是使用： pip install cython 或 conda install cython 与 Python 不同，Cython 编写的程序要先编译才能执行，因此，Cython 要求系统中有 C 编译器，在Windows 中使用 MinGW (gcc) 和 Visual Studio 的编译器均可。 Python 调用 C/C++ 函数编写一个 Python 函数以一个简单的函数为例，在 Python 中编写如下函数来计算 $tanh(x)$ 的值 1234567891011121314151617181920from random import randomfrom time import timee = 2.7182818284590452353602874713527def sinh(x): return (1 - (e ** (-2 * x))) / (2 * (e ** -x))def cosh(x): return (1 + (e ** (-2 * x))) / (2 * (e ** -x))def tanh(x): return sinh(x) / cosh(x)data = [random() for i in range(1000000)] # 生成随机数据start_time = time() # 调用1000000次tanh函数并统计时间result1 = list(map(tanh, data))end_time = time()print(end_time - start_time) 运行该程序需要 1.39 秒，将上述函数改写成 C++，将其保存在 mytanh.cpp 中 123456789101112131415161718#include &lt;cmath&gt;const double e = 2.7182818284590452353602874713527; double mysinh(double x)&#123; return (1 - pow(e, (-2 * x))) / (2 * pow(e, -x));&#125;double mycosh(double x)&#123; return (1 + pow(e, (-2 * x))) / (2 * pow(e, -x));&#125;double mytanh(double x)&#123; return mysinh(x) / mycosh(x);&#125; 由于sinh, cosh, tanh是 C++ 库函数，这里修改一下函数名。 在 Cython 中声明该函数新建一个fast_tanh.pyx 文件，.pyx 是 Cython 代码的后缀名，文件内容如下。 12345678# distutils: language = c++# cython: language_level = 3cdef extern from &quot;mytanh.cpp&quot;: double mytanh(double x) def fast_tanh(double x): return mytanh(x) 其中 12# distutils: language = c++# cython: language_level = 3 是用于配置编译器的特殊注释，分说明了使用的是 C++ 和 Python3 12cdef extern from &quot;mytanh.cpp&quot;: double mytanh(double x) Cython 使用 cdef extern from 来声明一个在 C++ 中实现的函数。上述代码声明了 mytanh 函数，使其可以在 Cython中使用。 在 Cython 中编写接口函数虽然 mytanh 现在可以在 Cython 中直接调用了，但 Python 并不能直接调用该函数，因此还要声明一个接口函数，命名为 fast_tahn。 12def fast_tanh(double x): return mytanh(x) 上述代码声明了一个接口函数，Cython 的语法与 Python 非常相似，若去掉形参中的 double 也是可行的，但若 Cython 知道参数的类型可以加速运行速度。Cython 支持大部分纯 Python 代码，因此可以在 Cython 中将 Python 的数据类型和 C++ 的数据类型相互转换，例如可以将 vector 转为 numpy array。若要使用 vector 类型，还需在开头加上 from libcpp.vector cimport vector。 编写 setup.pyfast_tanh.pyx 编写完后，需要编译后才能被 Python 调用，编译是通过 setup.py 进行的。 12345678910111213from distutils.core import setup, Extensionfrom Cython.Build import cythonizesetup(ext_modules=cythonize(Extension( 'fast_tanh', # 生成的模块名称 sources=['fast_tanh.pyx'], # 要编译的文件 language='c++', # 使用的语言 include_dirs=[], # gcc的-I参数 library_dirs=[], # gcc的-L参数 libraries=[], # gcc的-l参数 extra_compile_args=[], # 附加编译参数 extra_link_args=[], # 附加链接参数))) 其他参数可以根据需要添加，如果你暂时还不知道这些参数有什么用，那么可以先空着。将上述代码保存到 setup.py 后，运行如下命令即可编译 Cython 文件。 1python setup.py build_ext --inplace 需要注意，编译时的 Python 版本必须和调用时使用的 Python 版本相同。编译完成后，当前目录下会自动生成相应的 cpp 文件和 pyd 文件，在 Linux 上是 so 文件。 如果使用了 numpy 会在编译过程中看到警告： 1Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION 该警告可以忽略，因为 Cython 使用的是已经弃用的 Numpy API，不影响使用。 在 Python 中调用 fast_tanh 函数完成了编译的步骤后，fast_tanh在 Python 中就和一个普通的 Python 模块一样，可以使用 import 来导入 1from fast_tanh import fast_tanh # 从fast_tanh.pyx中导入fast_tanh函数 导入后，就可以在 Python 中像调用普通函数一样，直接使用 fast_tanh 函数了，完整代码如下，与之前的区别仅仅是把 tanh 替换成了 tanh，非常方便。 12345678910from random import randomfrom time import timefrom fast_tanh import fast_tanhdata = [random() for i in range(1000000)] # 生成随机数据start_time = time() # 计算并统计时间result = list(map(fast_tanh, data))end_time = time()print(end_time - start_time) # 输出运行时间 运行上述代码共需 0.18 秒，可以看到，仅仅替换了一个 tanh 函数后性能提升了近 8 倍。如果有其他更复杂的操作，可以提升几十上百倍的性能。 Python 调用 C/C++ 类编写一个 C++ 类知道如何调用一个 C/C++ 函数后，接下来继续调用一个 C/C++ 类。我们以一个简单的矩形类为例，假设我们在 C++ 中编写了一个矩形类。头文件 Rectangle.h 为： 123456789101112131415161718#ifndef RECTANGLE_H#define RECTANGLE_Hnamespace shapes &#123; class Rectangle &#123; public: int x0, y0, x1, y1; // 矩形对角线上的两个点坐标 Rectangle(); Rectangle(int x0, int y0, int x1, int y1); ~Rectangle(); int getArea(); void getSize(int* width, int* height); void move(int dx, int dy); &#125;;&#125;#endif Rectangle.cpp 中的实现为： 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include \"Rectangle.h\"namespace shapes &#123; // 构造函数 Rectangle::Rectangle () &#123;&#125; Rectangle::Rectangle (int x0, int y0, int x1, int y1) &#123; this-&gt;x0 = x0; this-&gt;y0 = y0; this-&gt;x1 = x1; this-&gt;y1 = y1; &#125; // 析构函数 Rectangle::~Rectangle () &#123;&#125; // 获取矩形面积 int Rectangle::getArea () &#123; return (this-&gt;x1 - this-&gt;x0) * (this-&gt;y1 - this-&gt;y0); &#125; // 获取矩形的边长 void Rectangle::getSize (int *width, int *height) &#123; (*width) = x1 - x0; (*height) = y1 - y0; &#125; // 移动矩形 void Rectangle::move (int dx, int dy) &#123; this-&gt;x0 += dx; this-&gt;y0 += dy; this-&gt;x1 += dx; this-&gt;y1 += dy; &#125;&#125; 在 Cython 中声明类接下来需要在 Cython 中编写一个接口。与前面调用 C++ 函数类似，使用 cdef extern from 来声明一个在 C++ 中实现的类： 1cdef extern from \"Rectangle.h\" namespace \"shapes\": 若没有命名空间，则使用： 1cdef extern from \"Rectangle.h\" 将声明放在 Rectangle.pxd 文件中，.pxd 文件相当于 C++ 的 .h 文件，专门用于声明： 1234567891011cdef extern from &quot;Rectangle.cpp&quot;: pass# 用cdef声明类cdef extern from &quot;Rectangle.h&quot; namespace &quot;shapes&quot;: cdef cppclass Rectangle: Rectangle() except + Rectangle(int, int, int, int) except + int x0, y0, x1, y1 int getArea() void getSize(int* width, int* height) void move(int, int) 由于 .h 文件中没有实现矩形类，还要使用 12cdef extern from &quot;Rectangle.cpp&quot;: pass 包含 Rectangle.cpp 中的代码 1cdef cppclass Rectangle: 声明了一个在 C++ 中定义的类，其他函数的声明与前面调用函数类似。在构造函数后加上 except + 可以使 Python 能够捕获到在构造函数中发生的异常，若不加 except +，则 Cython 不会处理构造函数中发生的异常。 在 Cython 中编写接口类与前面相同，虽然现在 C++ 中的类在 Cython 中可以直接访问了，但在 Python 中并不能访问。因此，我们还需要实现一个接口类，用于在 Python 中调用。注意，C++ 类的声明放在 .pxd 文件中, 接口类的实现放在 .pyx 中。PyRectangle.pyx为 : 1234567891011121314151617# distutils: language = c++from Rectangle cimport Rectangle# 接口类# Python可以直接访问接口类，接口类可以直接访问C++类cdef class PyRectangle: cdef Rectangle c_rect # 存储C++对象 def __cinit__(self, int x0, int y0, int x1, int y1): self.c_rect = Rectangle(x0, y0, x1, y1) def get_area(self): return self.c_rect.getArea() def get_size(self): cdef int width, height self.c_rect.getSize(&amp;width, &amp;height) return width, height def move(self, dx, dy): self.c_rect.move(dx, dy) 现在，PyRectangle 类就像普通的 Python 类一样可以直接在 Python 中调用了。 另外，Cython 也支持使用 new 创建 C++ 对象 12def __cinit__(self, int x0, int y0, int x1, int y1): self.c_rect = new Rectangle(x0, y0, x1, y1) 与 C++ 相同，使用了 new 就必须使用 delete 释放内存，否则会造成内存泄漏。 12def __dealloc__(self): # 析构函数 del self.c_rect # 释放内存 编译setup.py 内容如下 12345678910111213from distutils.core import setup, Extensionfrom Cython.Build import cythonizesetup(ext_modules=cythonize(Extension( 'PyRectangle', # 生成的模块名称 sources=['PyRectangle.pyx'], # 要编译的文件 language='c++', # 使用的语言 include_dirs=[], # gcc的-I参数 library_dirs=[], # gcc的-L参数 libraries=[], # gcc的-l参数 extra_compile_args=[], # 附加编译参数 extra_link_args=[], # 附加链接参数))) 使用 python setup.py build_ext --inplace 编译 在 Python 中调用接口类现在，PyRectangle 类就和普通的 Python 类一样，可以直接被 Python 调用 12345import PyRectanglex0, y0, x1, y1 = 1, 2, 3, 4rect = PyRectangle.PyRectangle(x0, y0, x1, y1)print(rect.get_area) 运行该程序，输出了矩形面积，调用成功。 总结通过 Cython 调用 C/C++ 的原理是： Python -&gt; Cython 接口 -&gt; C/C++ 访问 C++ 都是通过 Cython 接口完成的。 若还想了解更多，可以阅读 Cython 文档 参考资料 https://www.bookstack.cn/read/cython-doc-zh/README.md https://www.youtube.com/watch?v=D9RlT06a1EI&amp;t=45s","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"蒙特卡洛树搜索 MCTS 入门","slug":"蒙特卡洛树搜索 MCTS 入门","date":"2019-10-28T07:46:02.000Z","updated":"2020-02-28T05:41:34.165Z","comments":true,"path":"2019/10/28/蒙特卡洛树搜索 MCTS 入门/","link":"","permalink":"http://yoursite.com/2019/10/28/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2%20MCTS%20%E5%85%A5%E9%97%A8/","excerpt":"蒙特卡洛树搜索(Monte Carlo Tree Search) ，一种寻找最优决策的方法。","text":"蒙特卡洛树搜索(Monte Carlo Tree Search) ，一种寻找最优决策的方法。 【内容简介】蒙特卡洛树搜索(Monte Carlo Tree Search) 是一种寻找最优决策的方法，在AlphaGo中被运用，其主要分为四步：选择(Selection)，拓展(Expansion)，模拟(Simulation)，反向传播(Backpropagation)。 本文以井字棋为例对这一方法进行介绍。 基础知识节点在棋类问题中，MCTS 使用一个节点来表示一个游戏状态。若现在井字棋的棋盘上只有中间一个棋子，我们用一个节点表示这个游戏状态。那么，下一步棋有8种下法，所以对应的，刚才那个节点就有8个子节点(图中只画出了3个)，如下图所示。根据这个方法，这些子节点又有子节点，所有的井字棋游戏状态都可以被这样表示，于是它们就构成了一个树。蒙特卡洛树搜索就是要在这样一个树中搜索最可能获胜的游戏状态，即搜索最佳下棋策略。 节点的两个属性在蒙特卡洛树搜索中，节点记作$v$，且每个节点都有如下属性。 $N(v)$：节点$v$的访问次数，节点被访问多少次，该值就是多少。 $Q(v)$：节点$v$的累计奖励，即节点在反向传播过程中所有奖励的和。 这两个属性会在下面的过程中用到，并会详细说明。 搜索过程那么，给定当前游戏状态，如何获得下一步的最佳下法呢？对于井字棋来说，当然可以遍历所有可能性，直接找出最优策略。但若换成围棋等复杂的棋类，遍历的方法显然不可行。下面就是蒙特卡洛树搜索的核心部分。 选择(Selection)选择阶段，从根节点(给定的游戏状态)出发，根据一定的策略，向下选择一个节点，若被选择的节点未被访问，则执行扩展；若被选择的节点已被访问，则继续向下选择节点，直到遇见未被访问的节点并执行扩展，或遇见终止节点(游戏结束)，无需执行扩展，而直接执行反向传播。 这个选择的策略由该公式确定，对于当前节点的每个子节点计算如下公式，并选择结果最大的节点。$$\\underset{v’\\in ,,\\text{children of }v}{arg\\max}\\frac{Q\\left( v’ \\right)}{N\\left( v’ \\right)}+c\\sqrt{\\frac{\\text{2}\\ln N\\left( v \\right)}{N\\left( v’ \\right)}}$$其中， $v$ 表示父节点，$v’$ 表示子节点。$c$是一常数，用于权衡探索 (Exploration) 与利用 (Exploitation)。$c$越大，算法就越偏向于探索访问次数少的节点；$c$越小，算法就越偏向于选择获胜可能性高的节点，称为利用。 扩展 (Expansion)扩展非常简单，就是把选择步骤中遇到的未访问节点添加到现有的树中。 模拟 (Simulation)从被扩展的节点开始，让游戏随机进行，也就是在棋盘上随机下棋，直到游戏结束。若此时游戏胜利，则奖励 (Reward) 为$1$；若游戏失败，奖励为$-1$。这个奖励会在反向传播中被用到。 注：在其他应用中，奖励也可是其他值。 反向传播 (Backpropagation)反向传播其实就是对执行模拟的节点或终止节点的所有父节点的两个属性进行逐一更新的过程。 将奖励记作$R$，对所有节点$v$，包括当前节点，都执行以下操作。$$N(v)=N(v)+1 \\\\Q(v)=Q(v)+R$$我们再回头看看选择步骤中的公式$$\\underset{v’\\in ,,\\text{children of }v}{arg\\max}\\frac{Q\\left( v’ \\right)}{N\\left( v’ \\right)}+c\\sqrt{\\frac{\\text{2}\\ln N\\left( v \\right)}{N\\left( v’ \\right)}}$$可以看到，式中第一项其实就是该节点在前面的过程中获得的平均奖励，自然该值越大，选择该节点就越有可能获胜。那么为什么要加上第二项呢？这就涉及到探索与利用的权衡。 我们不能只选择已访问过的节点中平均奖励最大的节点，一些访问次数较少的、甚至没有访问过的节点它们可能获得比已探索的节点更丰厚的回报，因此也要适当地在未知的节点进行探索。这就是第二项的含义，当该节点访问次数占父节点次数的比例越小时，该值越大，代表我们越要在此节点进行探索。于是就不难理解$c$用于是权衡探索与利用的常数了。 这就是上限置信区间算法 (Upper Confidence Bound )，简称UCT算法。 搜索过程展示看完了这四个步骤，我们再来看一张动图帮助理解。图中节点内数字表示 $Q(v)/N(v)$ 搜索结束MCTS的整个搜索过程就是这样，那么什么时候结束呢？一般设置以下两个终止条件。 设置最大根节点搜索次数，达到该次数后结束搜索。 设置最大搜索时间，超过时间后结束搜索。 选择最佳节点搜索结束后，选择哪个节点作为下一步的选择呢？ 不是选择$Q$最大的节点，也不是选择平均奖励最大的节点，而是选择访问次数最多的节点。这样，就得到了当前游戏状态(根节点)下的一个选择。 如果下一步还要进行决策，则又要将下一步的状态作为根节点，重新执行MCTS搜索，并选择访问次数最多的节点作为下一步的策略。(上一步的搜索结果可以保留) 以上只是 MCTS 的简单介绍，想更详细的了解 MCTS 可以参考论文A Survey of Monte Carlo Tree Search Methods 另外，Github 上也已经有 MCTS 的 Python 实现源码 https://github.com/pbsinclair42/MCTS","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"mcts","slug":"mcts","permalink":"http://yoursite.com/tags/mcts/"}]}]}