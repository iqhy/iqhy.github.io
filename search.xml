<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个 Python 整数溢出的坑</title>
      <link href="/posts/2020/120390311/"/>
      <url>/posts/2020/120390311/</url>
      
        <content type="html"><![CDATA[<p>众所周知，Python 的整数是不会溢出的，例如运行如下代码，Python 可以完整地计算出 $2^{100}$</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">2</span> ** <span class="number">200</span>)</span><br><span class="line"><span class="comment"># 1606938044258990275541962092341162602522202993782792835301376</span></span><br></pre></td></tr></table></figure><p>但是，在执行以下代码时，发现整数却溢出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">array = np.array([<span class="number">145</span>, <span class="number">124</span>, <span class="number">58</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    result += i</span><br><span class="line">    result = result &lt;&lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># -1854129664</span></span><br></pre></td></tr></table></figure><p>这是为什么呢？Python 的整数怎么会溢出呢？我们输出中间的计算过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">array = np.array([<span class="number">145</span>, <span class="number">124</span>, <span class="number">58</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    result += i</span><br><span class="line">    print(result)</span><br><span class="line">    result = result &lt;&lt; <span class="number">8</span></span><br><span class="line">    print(result, <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="comment"># 145</span></span><br><span class="line"><span class="comment"># 37120 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 37244</span></span><br><span class="line"><span class="comment"># 9534464 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 9534522</span></span><br><span class="line"><span class="comment"># -1854129664</span></span><br></pre></td></tr></table></figure><p>看来是在最后一步溢出的，难道是 Python 算错了吗？单独计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(9534522 &lt;&lt; 8)</span><br><span class="line"># 2440837632</span><br></pre></td></tr></table></figure><p>可以看到，单独计算 <code>9534522 &lt;&lt; 8</code> 的结果确是正确的。进一步调试，发现 <code>result</code> 的类型竟然是 <code>int32</code> 而不是 <code>int</code></p><img src="/posts/2020/120390311/fig2.jpg" alt="fig2" style="zoom:67%;"><p>原来是因为 <code>array</code> 中的数据类型是 <code>np.int32</code> ，因此变量 <code>i</code> 的类型也是 <code>np.int32</code> ，在执行 <code>result += i</code> 后，<code>int</code> 类型与 <code>np.int32</code> 类型相加后结果被转成了 <code>np.int32</code> 这才出现了整数溢出。因此，只需将 <code>i</code> 的类型转为 <code>int</code> 就不会发生溢出了。修改前面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">array = np.array([<span class="number">145</span>, <span class="number">124</span>, <span class="number">58</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    result += int(i)    <span class="comment"># 将 np.int32 转为 int</span></span><br><span class="line">    result = result &lt;&lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 2440837632 没有出现溢出</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马尔可夫决策 MDP 基本概念 (一)</title>
      <link href="/posts/2020/0619232437/"/>
      <url>/posts/2020/0619232437/</url>
      
        <content type="html"><![CDATA[<p>本文将简要介绍马尔可夫过程 (Markov Processes) 与马尔可夫奖励过程 (Markov Reward Processes)。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近准备写一个系列，从 <strong>MDP</strong> 到部分可观测 MDP (<strong>POMDP</strong>), 再到分布式 MDP(<strong>Dec-MDP</strong>)。</p><p>要了解马尔可夫决策过程 (<strong>Markov Decision Processes</strong>)，首先要了解马尔可夫过程 (<strong>Markov Processes</strong>)和马尔可夫奖励过程 (<strong>Markov Reward Processes</strong>)，这两者是 MDP 的基础。本文将按如下顺序介绍</p><ol><li>马尔可夫过程 (Markov Processes)</li><li>马尔可夫奖励过程 (Markov Reward Processes)</li><li>马尔可夫决策过程 (Markov Decision Processes)</li></ol><h2 id="马尔可夫过程-Markov-Processes"><a href="#马尔可夫过程-Markov-Processes" class="headerlink" title="马尔可夫过程 (Markov Processes)"></a>马尔可夫过程 (Markov Processes)</h2><h3 id="马尔可夫性质-Markov-Property"><a href="#马尔可夫性质-Markov-Property" class="headerlink" title="马尔可夫性质 (Markov Property)"></a>马尔可夫性质 (Markov Property)</h3><p>马尔可夫过程为什么叫这个名字呢，因为它具有马尔可夫性质。马尔可夫性质简而言之，就是<strong>未来发生的事情只与当前状态有关而与过去无关</strong>，是一个<strong>无记忆</strong>的过程，它要求状态包含可能对未来产生影响的所有信息。</p><p>下面举一个例子，假设每天的天气有三种状态：晴天、阴天、下雨。我们将第 $i$ 天的状态记为 $s_i$ ，如果第 7 天下雨，那么<br>$$<br>s_7=下雨<br>$$<br>第 7 天下雨仅仅取决于第 6 天的状态，若第 6 天天晴，则第七天有0.2的概率下雨；若第 6 天阴天，则第七天有0.3 的概率下雨；若第 6 天阴天，则第七天有 0.5 的概率下雨；第 7 天下雨的概率只与第 6 天有关，而与前面 5 天的状态无关，这就是马尔可夫性质，用数学公式来描述就是<br>$$<br>\mathbb{P}\left[ S_{t+1}|S_t \right] =\mathbb{P}\left[ S_{t+1}|S_t,S_{t-1},…,S_1 \right]<br>$$</p><h3 id="状态转移矩阵-State-Transition-Matrix"><a href="#状态转移矩阵-State-Transition-Matrix" class="headerlink" title="状态转移矩阵 (State Transition Matrix)"></a>状态转移矩阵 (State Transition Matrix)</h3><p>很容易可以看出来，由于只有三种天气，前后两天的天气组合共有 $3\times 3=9$ 种。将这9个概率按一定规则写进矩阵，就是状态转移矩阵。</p><p>那这个规则是怎样的呢？若我们将天晴、阴天、下雨这三种状态编号为 1、2、3，则状态转移矩阵中的第 $i$ 行，第 $j$ 列的元素意义如下<br>$$<br>P_{ij}=\mathbb{P}\left[ S_{t+1}=\text{状态}i|S_t=\text{状态}j \right]<br>$$<br>换句话说，就是前一天天气为状态 $i$，后一天天气为状态 $j$ 的概率，按照这样的规则，整个状态转移矩阵 $P$ 为<br>$$<br>\begin{matrix}<br>    &amp;        \text{to}\newline<br>    P=\text{from}&amp;        \left[ \begin{matrix}<br>    P_{11}&amp;        P_{12}&amp;        P_{13}\newline<br>    P_{21}&amp;        P_{22}&amp;        P_{23}\newline<br>    P_{31}&amp;        P_{32}&amp;        P_{33}\newline<br>\end{matrix} \right]\<br>\end{matrix}<br>$$</p><p>不难看出，状态转移矩阵 $P$ 每一行的和都为 1，因为概率之和必为 1。</p><h3 id="马尔可夫过程的定义"><a href="#马尔可夫过程的定义" class="headerlink" title="马尔可夫过程的定义"></a>马尔可夫过程的定义</h3><p><strong>马尔可夫过程就是具有马尔可夫性的随机过程</strong>，上述天气的例子描述了一个满足马尔可夫性、随着时间的推移，天气不断随机变化的过程，这就是一个马尔可夫过程。一个马尔可夫过程可由 $&lt;S,P&gt;$ 两个参数完全确定，这两个参数确定了，整个模型就确定了。其中</p><ul><li>$S$ 是所有状态的集合，在刚才的例子中 $S$ 就是三种不同的天气组成的集合</li><li>$P$ 是状态转移矩阵</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>将前面描述天气变化的马尔可夫过程画成图，如下图所示。马尔可夫过程都可以用这样的图来表示。</p><img src="/posts/2020/0619232437/天气马尔可夫链.jpg" alt="天气马尔可夫链" style="zoom: 40%;"><p>下面我们看一个稍微复杂一点的例子，这是一个描述学生学习的马尔可夫过程，在这个例子中，学生共有三节课要学习，在上课过程中，学生有一定概率走神，去刷 Facebook或睡觉，也有可能去酒吧，还有可能坚持把三堂课学完，最终通过考试，按照同样的方法画成图，如下图所示。</p><img src="/posts/2020/0619232437/学生马尔可夫过程.png" alt="学生马尔可夫过程" style="zoom: 40%;"><p>将其状态转移概率写成状态转移矩阵，如该公式所示，可以看到，该矩阵的每行之和都是1。<br>$$<br>P=\begin{matrix}<br>    &amp;        \begin{matrix}<br>    \text{C}1&amp;        \text{C}2&amp;        \text{C}3&amp;        \text{Pass}&amp;        \text{Pub}&amp;        \text{FB}&amp;        \text{Sleep}\newline<br>\end{matrix}\newline<br>    \begin{array}{l}<br>    \text{C}1\newline<br>    \text{C}2\newline<br>    \text{C}3\newline<br>    \text{Pass}\newline<br>    \text{Pub}\newline<br>    \text{FB}\newline<br>    \text{Sleep}\newline<br>\end{array}&amp;        \left[ \begin{matrix}<br>    \ \ \quad  &amp;        0.5&amp;        \ \ \quad   &amp;        \ \ \quad  &amp;        \ \ \quad   &amp;        0.5&amp;        \ \ \quad   \newline<br>    \ \ &amp;        \ \ &amp;        0.8&amp;        \ \ &amp;        \ \ &amp;        \ \ \qquad&amp;        0.2\newline<br>    \ \ &amp;        \ \ &amp;        \ \ &amp;        0.6&amp;        0.4&amp;        \ \ &amp;        \ \ \newline<br>    \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        1.0\newline<br>    0.2&amp;        0.4&amp;        0.4&amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ \newline<br>    0.1&amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        0.9&amp;        \ \ \newline<br>    \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        \ \ &amp;        1.0\newline<br>\end{matrix} \right]\<br>\end{matrix}<br>$$<br>与刚才天气的例子不同，这个马尔可夫过程有一个终止状态，一旦进入这个状态，整个过程就结束了，这个状态通常可能是游戏结束的状态。为了与其他普通状态一起表示，这个终止状态可以视为以概率 1 转移到自身，这样做的目的是方便处理。</p><h2 id="马尔可夫奖励过程"><a href="#马尔可夫奖励过程" class="headerlink" title="马尔可夫奖励过程"></a>马尔可夫奖励过程</h2><p><strong>马尔可夫过程加上奖励就是马尔可夫奖励过程</strong>，为什么需要有奖励呢？</p><p>我们对环境进行 MDP 建模的目的是为了让机器能够在环境中学习出好的策略，机器怎么学习呢，光有转移概率是不够的，靠的是奖励。奖励可正也可负，若当前状态对我们有利，就给正奖励；若当前状态对我们不利，就给负奖励。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>马尔可夫奖励过程是带奖励的马尔可夫过程，一个马尔可夫过程可由 $&lt;S,P,R,\gamma&gt;$ 四个参数完全确定。</p><ul><li>$S$ 是所有状态的集合，在刚才的例子中 $S$ 就是三种不同的天气组成的集合</li><li>$P$ 是状态转移矩阵</li><li>$R$ 是奖励，每个状态都对应有一个奖励</li><li>$\gamma$  是折损因子 (discount factor)，$\gamma \in[0,1]$，这个后面解释，是用来选择“短视”或“远视”的。</li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>上述学生学习的马尔可夫过程加上奖励后，如下图所示</p><img src="/posts/2020/0619232437/MRP.jpg" alt="MRP" style="zoom:60%;"><p>学习的目的是为了通过考试，所以是正奖励；而学习的过程中比较枯燥、辛苦，给负奖励；临时去酒吧能暂时感到快乐，给较小的正奖励。我们最终的目标是为了取得尽可能高的奖励。</p><p>若某学生的学习过程是 C1 C2 C3 Pass Sleep，那么在整个过程中获得的奖励是 4；若某学生的学习过程是 C1 FB FB C1 C2 Sleep，那么在整个过程中获得的奖励是 -8。</p><h3 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h3><p>回报 (return) $G_t$ 定义为从时刻 $t$ 开始，之后获取的所有折损奖励求和<br>$$<br>G_t=R_{t+1}+\gamma R_{t+2}+…=\sum_{k=0}^{\infty}{\gamma ^kR_{t+k+1}}<br>$$<br>由于 $\gamma \in[0,1]$，$\gamma$ 控制着对未来奖励的关心程度。若 $\gamma=0$，$G_t$ 退化为 $G_t=R_{t+1}$ 意味着最短视，不关心未来的奖励，只关心当前的奖励；若 $\gamma=1$，意味着最远视，未来的奖励非常重要。</p><ul><li>$\gamma$ 越接近 $0$ 则越短视</li><li>$\gamma$ 越接近 $1$ 则越远视</li></ul><p>要注意的是回报与前面在整个过程中获得的奖励获得的奖励是不同的，回报是站在当前的视角下考虑未来，而前面是实际已经结束了，再回头统计。</p><h3 id="为什么需要折损因子"><a href="#为什么需要折损因子" class="headerlink" title="为什么需要折损因子"></a>为什么需要折损因子</h3><p>大多数 MRP 或 MDP 中都引入了折损因子，这是为什么呢？主要有以下几个方面的原因。</p><ul><li>数学处理方便</li><li>防止回报 $G_t$ 趋于正无穷</li><li>模型与现实存在偏差，越远的未来可能偏差越大</li><li>在金融等领域有实际物理意义</li><li>与人类和动物的行为类似，人们更喜欢及时奖励</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>马尔可夫过程就是满足马尔可夫性质的随机过程，为了让机器在环境中学习，引入了奖励，这就是马尔可夫奖励过程。奖励分为即时奖励和未来奖励，折损因子 $\gamma$ 用于平衡“短视”与“远视”。</p>]]></content>
      
      
      <categories>
          
          <category> MDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> MDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 和 C++ 并行 MCTS</title>
      <link href="/posts/2020/315210355/"/>
      <url>/posts/2020/315210355/</url>
      
        <content type="html"><![CDATA[<p>简单介绍在 Python 和 C++ 中蒙特卡洛树搜索 (MCTS) 的并行化方法。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们在 Python 中实现了 MCTS 后，可能会遇到性能问题，这时就需要将 MCTS 并行化。MCTS 的并行方法主要分为三种：</p><ol><li><strong>叶并行 (leaf parallelization)</strong>, 即在叶节点扩展时进行并行。</li><li><strong>根并行 (root parallelization)</strong>, 即直接使用进程或线程创建多个不同的树，在不同的树中同时执行搜索。</li><li><strong>树并行 (tree parallelization)</strong>, 即多个线程在同一个树中进行并行，每个线程在树的不同部分执行搜索。</li></ol><p>这些并行方法的详细介绍可以参考这篇<a href="https://ieeexplore.ieee.org/abstract/document/6145622" target="_blank" rel="noopener">论文</a>的第 25 页。</p><img src="/posts/2020/315210355/1.png" alt="1" style="zoom:50%;"><center>图1 MCTS的并行化方法<sup>[1]</sup></center><h2 id="叶并行"><a href="#叶并行" class="headerlink" title="叶并行"></a>叶并行</h2><p>叶并行的方法比较简单，只需在遇到叶节点时，同时执行多次模拟 (simulation)，然后使用多次模拟的结果来代替之前的结果即可。但是在 AlphaZero 的算法中，叶并行的方法并不适用。因为该算法实际上并没有模拟 (simulation) 这个过程，而是使用神经网络直接返回当前节点的评估结果，因此需要使用其他并行方法。AlphaZero 的原理可以参考这篇<a href="https://charlesliuyx.github.io/2017/10/18/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9C%8B%E6%87%82AlphaGo%E5%85%83/" target="_blank" rel="noopener">文章</a>。</p><h2 id="根并行"><a href="#根并行" class="headerlink" title="根并行"></a>根并行</h2><p>根并行的实现同样比较简单，只要使用 Multiprocessing 或 concurrent.futures.ProcessPoolExecutor 直接调用 MCTS 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mcts_main</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    mcts搜索的主函数</span></span><br><span class="line"><span class="string">    输入参数：a, b</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">p = mp.Pool(<span class="number">10</span>)           <span class="comment"># 10个进程  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):       <span class="comment"># 50个待执行任务</span></span><br><span class="line">    p.apply_async(mcts_main, args=(a, b))</span><br><span class="line">p.close()</span><br><span class="line">p.join()</span><br></pre></td></tr></table></figure><p>如果在 MCTS 中调用了 GPU 版的 Keras，需要设置显存按需增长，并且要将 <code>import keras</code> 放在函数内，否则将不能并行调用 <code>model.predict()</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br><span class="line">session = tf.Session(config=config)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mcts_main</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> keras            <span class="comment"># import keras要放在函数内</span></span><br><span class="line">    <span class="comment"># mcts搜索的主函数</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这样并行虽然简单，但缺点是程序占内存大，且显存容易不够用。</p><h2 id="树并行"><a href="#树并行" class="headerlink" title="树并行"></a>树并行</h2><p>在 Python 中直接按照上述方法并行后，可能还是无法满足需求，需要更高效的并行方法。由于 GIL 的限制，在Python 中不能使用多线程来并行 MCTS，但实现树并行时需要进程/线程间较多的通信，如果直接在 Python 中用 multiprocessing 实现，可能带来较大的性能损失，同时实现起来也比较困难<sup>[2]</sup>。</p><p>一种解决方法是用 C++ 实现树并行，再封装成 Python 接口，在 Python 中调用，这样就避开了 GIL 的限制。C++ 的树并行实现可以参考这个 <a href="https://github.com/hijkzzz/alpha-zero-gomoku" target="_blank" rel="noopener">Github 项目</a> 。这个项目使用的是 PyTorch，如果你使用的是 Keras，要在 C++ 中调用 Keras 可以参考这篇<a href="https://iqhy.github.io/posts/2020/0229161832/">文章</a>。将 C++ 封装成 Python 接口可以参考这篇<a href="https://iqhy.github.io/posts/2020/0228155601/">文章</a>。</p><p>封装成 Python 接口后，由于避开了 GIL 的限制，可以直接通过多线程调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mcts_main</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    mcts搜索的主函数</span></span><br><span class="line"><span class="string">    输入参数：a, b</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大线程数10，50个待执行任务</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">            futures = [executor.submit(mcts_main, a, b) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]</span><br><span class="line">            <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">                result = future.result()</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] Browne, C. B., Powley, E., Whitehouse, D., Lucas, S. M., Cowling, P. I., Rohlfshagen, P., … &amp; Colton, S. (2012). A survey of monte carlo tree search methods. <em>IEEE Transactions on Computational Intelligence and AI in games</em>, <em>4</em>(1), 1-43.</p><p>[2] <a href="https://stackoverflow.com/questions/52584142/mcts-tree-parallelization-in-python-possible" target="_blank" rel="noopener">https://stackoverflow.com/questions/52584142/mcts-tree-parallelization-in-python-possible</a></p><p>本人水平有限，如有不足之处，欢迎指出。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> mcts </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 C++ 中调用 keras</title>
      <link href="/posts/2020/0229161832/"/>
      <url>/posts/2020/0229161832/</url>
      
        <content type="html"><![CDATA[<p>使用 frugally-deep 在 C++ 中轻松调用 Keras 模型</p><a id="more"></a><p>Keras 使用起来非常方便，我们有时候需要在 C++ 中调用训练好的模型，希望在 C++ 中调用 Keras 的 <code>model.predict()</code>，但 Keras 并没有提供 C++ API。一种解决方法是使用 TensorFlow 的 C++ API，但编译过程非常繁琐，容易失败。这里我们使用另一种方法，使用 Github 上的 <a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">frugally-deep</a>。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>frugally-deep 是一个用 C++ 实现的库，它可以将 Keras 保存的 <code>.h5</code> 文件直接转为 C++ 中可调用的 <code>.json</code> 文件，经过一步转换后就可以直接调用。frugally-deep 使用起来比较简单，支持非常多常用的模型，无需编译 TensorFlow。同时它也是线程安全的，可以很方便的在多 CPU 上进行前向传播。另外，frugally-deep 不支持使用 GPU，如果不是必须要使用 GPU，frugally-deep 是一个很好的选择。</p><h3 id="支持的模型"><a href="#支持的模型" class="headerlink" title="支持的模型"></a>支持的模型</h3><p>frugally-deep 支持大多数常用的模型</p><ul><li><code>Add</code>, <code>Concatenate</code>, <code>Subtract</code>, <code>Multiply</code>, <code>Average</code>, <code>Maximum</code></li><li><code>AveragePooling1D/2D</code>, <code>GlobalAveragePooling1D/2D</code></li><li><code>Bidirectional</code>, <code>TimeDistributed</code>, <code>GRU</code>, <code>LSTM</code>, <code>CuDNNGRU</code>, <code>CuDNNLSTM</code></li><li><code>Conv1D/2D</code>, <code>SeparableConv2D</code>, <code>DepthwiseConv2D</code></li><li><code>Cropping1D/2D</code>, <code>ZeroPadding1D/2D</code></li><li><code>BatchNormalization</code>, <code>Dense</code>, <code>Flatten</code></li><li><code>Dropout</code>, <code>AlphaDropout</code>, <code>GaussianDropout</code>, <code>GaussianNoise</code></li><li><code>SpatialDropout1D</code>, <code>SpatialDropout2D</code>, <code>SpatialDropout3D</code></li><li><code>MaxPooling1D/2D</code>, <code>GlobalMaxPooling1D/2D</code></li><li><code>ELU</code>, <code>LeakyReLU</code>, <code>ReLU</code>, <code>SeLU</code>, <code>PReLU</code></li><li><code>Sigmoid</code>, <code>Softmax</code>, <code>Softplus</code>, <code>Tanh</code></li><li><code>UpSampling1D/2D</code></li><li><code>Reshape</code>, <code>Permute</code></li><li><code>Embedding</code></li></ul><p>以及</p><ul><li>multiple inputs and outputs</li><li>nested models</li><li>residual connections</li><li>shared layers</li><li>variable input shapes</li><li>arbitrary complex model architectures / computational graphs</li><li>custom layers (by passing custom factory functions to <code>load_model</code>)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>frugally-deep 的安装很简单，可以使用官方安装教程 <a href="https://github.com/Dobiasd/frugally-deep/blob/master/INSTALL.md" target="_blank" rel="noopener">INSTALL.md</a> 上的命令安装，也可以直接下载源码。使用命令安装的方法在官方的教程中已经很详细了，所以这里采用直接下载源码的方式。</p><p>使用 frugally-deep 前需要有 (截止2020年6月13日)</p><ul><li>一个支持 C++14 的编译器</li><li>Python 版本在 3.7 或以上</li><li>TensorFlow 2.1.1</li></ul><p>如果你正在使用 Tensorflow 1.x 的 Keras，安装 TensorFlow 2.x.x 后大多数情况下只需要把 <code>import keras</code> 修改为 <code>import tensorflow.keras</code> 即可，Keras 的改动并不大。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>分别前往<a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">frugally-deep</a>, <a href="https://github.com/Dobiasd/FunctionalPlus" target="_blank" rel="noopener">FunctionalPlus</a> , <a href="https://gitlab.com/libeigen/eigen#" target="_blank" rel="noopener">Eigen</a> 和 <a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">json</a> 点击右侧的 Clone 再点击 Download ZIP 下载这些源码。(Gitlab 直接点击下载)</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>假设现在代码根目录下的源文件只有 <code>main.cpp</code>，文件结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+-- main.cpp</span><br></pre></td></tr></table></figure><p>将 frugally-deep 源码中的 include 文件夹和 keras_export 文件夹解压到与 <code>main.cpp</code> 相同的目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+-- include</span><br><span class="line">|   +-- fdeep</span><br><span class="line">+-- keras_export</span><br><span class="line">+-- main.cpp</span><br></pre></td></tr></table></figure><p>将 FunctionalPlus 源码中 include 文件夹内的 fplus 文件夹复制到 <code>main.cpp</code> 相同目录下的 include 文件夹内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-- include</span><br><span class="line">|   +-- fdeep</span><br><span class="line">|   +-- fplus</span><br><span class="line">+-- keras_export</span><br><span class="line">+-- main.cpp</span><br></pre></td></tr></table></figure><p>同样，将 json 源码中 include 文件夹内的 nlohmann 文件夹复制到 <code>main.cpp</code> 相同目录下的 include 文件夹内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-- include</span><br><span class="line">|   +-- fdeep</span><br><span class="line">|   +-- fplus</span><br><span class="line">|   +-- nolhmann</span><br><span class="line">+-- keras_export</span><br><span class="line">+-- main.cpp</span><br></pre></td></tr></table></figure><p>最后将 eigen 源码中 Eigen 文件夹放在 <code>main.cpp</code> 相同目录下的 include 文件夹内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-- include</span><br><span class="line">|   +-- Eigen</span><br><span class="line">|   +-- fdeep</span><br><span class="line">|   +-- fplus</span><br><span class="line">|   +-- nolhmann</span><br><span class="line">+-- keras_export</span><br><span class="line">+-- main.cpp</span><br></pre></td></tr></table></figure><p>需要的文件已经安装完成，下面可以开始使用了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>总的来说，使用 frugally-deep 的步骤为：</p><ol><li>在 Python 中训练好模型后，使用 <code>model.save(&#39;....h5&#39;, include_optimizer=False)</code> 保存模型</li><li>使用 <code>keras_export/convert_model.py</code> 将 <code>.h5</code> 模型转换成 C++ 模型</li><li>在 C++ 中使用 <code>fdeep::load_model(...)</code> 加载模型</li><li>在 C++ 中使用 <code>model.predict(...)</code> 调用模型</li></ol><p>下面我们以 frugally-deep <a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">主页</a> 上的例子来说明如何使用。假设我们在 Python 中编写了模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create_model.py</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">inputs = Input(shape=(<span class="number">4</span>,))</span><br><span class="line">x = Dense(<span class="number">5</span>, activation=<span class="string">'relu'</span>)(inputs)</span><br><span class="line">predictions = Dense(<span class="number">3</span>, activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line">model = Model(inputs=inputs, outputs=predictions)</span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'nadam'</span>)</span><br><span class="line"></span><br><span class="line">model.fit(</span><br><span class="line">    np.asarray([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]),</span><br><span class="line">    np.asarray([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]), epochs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">model.save(<span class="string">'keras_model.h5'</span>, include_optimizer=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>运行 <code>create_model.py</code> 后，当前目录下生成了 <code>keras_model.h5</code>，接下来使用下面的命令进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python keras_export/convert_model.py keras_model.h5 fdeep_model.json</span><br></pre></td></tr></table></figure><p>看到下面这些就是转换成功了，转换成功后，当前目录下会生成 <code>fdeep_model.json</code>，在 C++ 中读取 <code>fdeep_model.json</code> 就可以直接调用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Forward pass took 0.091729 s.</span><br><span class="line">Forward pass took 0.038896 s.</span><br><span class="line">Forward pass took 0.077791 s.</span><br><span class="line">Starting performance measurements.</span><br><span class="line">Forward pass took 0.037899 s.</span><br><span class="line">Forward pass took 0.037896 s.</span><br><span class="line">Forward pass took 0.043883 s.</span><br><span class="line">Forward pass took 0.038922 s.</span><br><span class="line">Forward pass took 0.042861 s.</span><br><span class="line">Forward pass took 0.04029220000000001 s on average.</span><br><span class="line">Converting model architecture.</span><br><span class="line">Converting model weights.</span><br><span class="line">Done converting model weights.</span><br><span class="line">Calculating model hash.</span><br><span class="line">Model conversion finished.</span><br><span class="line">writing fdeep_model.json</span><br></pre></td></tr></table></figure><p>转换过程中，frugally-deep 会自动对模型进行测试，验证相同的输入下 ，模型在 Python 和 C++ 中的输出是否相同。若输出不同会直接报错，所以不必担心转换出错。</p><p>转换完成后，在 C++ 中进行调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fdeep/fdeep.hpp&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> model = fdeep::load_model(<span class="string">"fdeep_model.json"</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> result = model.predict(</span><br><span class="line">        &#123;fdeep::tensor(fdeep::tensor_shape(<span class="keyword">static_cast</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;(<span class="number">4</span>)),</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)&#125;);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; fdeep::show_tensors(result) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，以 Visual Studio 为例，编译器会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error C1083: 无法打开包括文件: “fdeep/fdeep.hpp”: No such file or directory</span><br></pre></td></tr></table></figure><p>这是因为还没有添加<strong>附加包含目录</strong>，右键点击<strong>“解决方案资源管理器”</strong>中的<strong>项目名称</strong>，选择<strong>属性</strong> -&gt; <strong>配置属性</strong> -&gt; <strong>C/C++</strong> -&gt; <strong>常规</strong>，在右侧的附加包含目录中填上 <code>$(ProjectDir)include;</code> 若使用的是 gcc 编译器，要在编译时加上参数 <code>-Iinclude</code></p><p>再次运行 <code>main.cpp</code>，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Loading json ... done. elapsed time: 0.009921 s</span><br><span class="line">Building model ... done. elapsed time: 0.018725 s</span><br><span class="line">Running test 1 of 1 ... done. elapsed time: 0.003242 s</span><br><span class="line">Loading, constructing, testing of fdeep_model.json took 0.038064 s overall.</span><br><span class="line">[[[[[[[0.7297, 0.1624, 0.1078]]]]]]]</span><br></pre></td></tr></table></figure><p>成功输出了结果，调用成功。另外，<code>model.predict()</code> 是<strong>线程安全</strong>的，可以直接在多个线程中调用。如果想在多 CPU 上并行预测，使用 <code>model::predict_multi</code> 就会自动在多 CPU 上执行 <code>model.predict()</code>。要注意的是，<code>model::predict_multi</code> 的并行是对多个输入数据的并行，并不是对一个数据的并行。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="model-predict-的数据类型"><a href="#model-predict-的数据类型" class="headerlink" title="model.predict() 的数据类型"></a>model.predict() 的数据类型</h3><p>frugally-deep 使用的数据类型是 <code>fdeep::tensor</code>，下面的例子说明了如何声明一个 <code>fdeep::tensor</code> 并初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tensor的形状参数在fdeep::tensor_shape()中，0是初始化的值</span></span><br><span class="line">fdeep::<span class="function">tensor <span class="title">tensor_a</span><span class="params">(fdeep::tensor_shape(<span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>), <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="comment">// 将tensor_a[0][1][2]位置的值置1</span></span><br><span class="line">tensor_a.<span class="built_in">set</span>(fdeep::internal::tensor_pos(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>有了 <code>fdeep::tensor</code> 我们可能会需要将其转化为 <code>std::vector</code> 进行后续的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将tensor_a转为std::vector</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; vec = *tensor_a.as_vector();</span><br></pre></td></tr></table></figure><p>除此之外，其他的方法可以参考官方 <a href="https://github.com/Dobiasd/frugally-deep/blob/master/FAQ.md" target="_blank" rel="noopener">FAQ.md</a>。要注意，frugally-deep 中必须采用 channel-last 的格式。</p><h3 id="error-C2653"><a href="#error-C2653" class="headerlink" title="error C2653:"></a>error C2653:</h3><p>使用 Visual Studio 2019 时可能会遇到这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error C2653: &apos;FOut&apos;: is not a class or namespace name</span><br></pre></td></tr></table></figure><p>这是一个编译器 BUG，详见 <a href="https://github.com/Dobiasd/FunctionalPlus/issues/159" target="_blank" rel="noopener">Github issue</a> ，目前已经在 16.5 Preview 2 版本中修复，<del>解决方法是使用 Visual Studio 预览版或 Visual Studio 2017</del>。目前已经可以直接升级正式版了，直接使用 Visual Studio Installer 升级最新版即可。</p><h3 id="fdeep-model-没有默认构造函数"><a href="#fdeep-model-没有默认构造函数" class="headerlink" title="fdeep::model 没有默认构造函数"></a>fdeep::model 没有默认构造函数</h3><p>当使用 <code>fdeep::model</code> 作为类的成员变量时，会遇到 <code>fdeep::model 没有默认构造函数</code> 的问题，这是作者刻意为之的，解决方法是使用<code>std::unique_ptr&lt;fdeep::model&gt;</code></p><p>下面的例子说明了如何使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// neural_network.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fdeep/fdeep.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;fdeep::model&gt; model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NeuralNetwork();</span><br><span class="line">    fdeep::<span class="function">tensors <span class="title">predict</span><span class="params">(fdeep::tensor&amp; feature_planes)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// neural_network.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"neural_network.h"</span></span></span><br><span class="line"></span><br><span class="line">NeuralNetwork::NeuralNetwork()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;model = <span class="built_in">std</span>::make_unique&lt;fdeep::model&gt;(fdeep::load_model(<span class="string">"fdeep_model.json"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdeep::tensors NeuralNetwork::predict(fdeep::tensor&amp; data)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;model-&gt;predict(&#123; data &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行速度比-Python-慢-100-倍"><a href="#运行速度比-Python-慢-100-倍" class="headerlink" title="运行速度比 Python 慢 100 倍"></a>运行速度比 Python 慢 100 倍</h3><p>这是因为编译器没有开优化。若使用 Visual Studio ，要把”Debug”模式改为”Release”模式。 gcc 要开 -O3 优化。修改后就正常了。参考<a href="https://github.com/Dobiasd/frugally-deep/blob/master/FAQ.md" target="_blank" rel="noopener">FAQ.md</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你需要在 C++ 中调用 <code>model.predict()</code> 且没有使用 GPU 的需求，frugally-deep 是一个很好的选择。</p><p>还想了解更多可以阅读官方的英文资料 <a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">frugally-deep</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">https://github.com/Dobiasd/frugally-deep</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 调用 C++</title>
      <link href="/posts/2020/0228155601/"/>
      <url>/posts/2020/0228155601/</url>
      
        <content type="html"><![CDATA[<p>Python 的代码优雅而实用，但是经常会遇到性能问题，这时可以使用 C/C++ 重写几个函数来解决，这样就同时兼顾了开发效率和性能。</p><a id="more"></a><p>本文使用分为3个部分</p><ol><li>安装 Cython (注意区别 CPython)</li><li>Python 调用 C++ 函数</li><li>Python 调用 C++ 类</li></ol><h2 id="安装-Cython"><a href="#安装-Cython" class="headerlink" title="安装 Cython"></a>安装 Cython</h2><p>安装 Cython 最简单方法的是使用：</p><p><code>pip install cython</code> 或 <code>conda install cython</code></p><p>与 Python 不同，Cython 编写的程序要先编译才能执行，因此，Cython 要求系统中有 C 编译器，在Windows 中使用 MinGW (gcc) 和 Visual Studio 的编译器均可。</p><h2 id="Python-调用-C-C-函数"><a href="#Python-调用-C-C-函数" class="headerlink" title="Python 调用 C/C++ 函数"></a>Python 调用 C/C++ 函数</h2><h3 id="编写一个-Python-函数"><a href="#编写一个-Python-函数" class="headerlink" title="编写一个 Python 函数"></a>编写一个 Python 函数</h3><p>以一个简单的函数为例，在 Python 中编写如下函数来计算 $tanh(x)$ 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">e = <span class="number">2.7182818284590452353602874713527</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinh</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - (e ** (<span class="number">-2</span> * x))) / (<span class="number">2</span> * (e ** -x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosh</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + (e ** (<span class="number">-2</span> * x))) / (<span class="number">2</span> * (e ** -x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sinh(x) / cosh(x)</span><br><span class="line"></span><br><span class="line">data = [random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>)]    <span class="comment"># 生成随机数据</span></span><br><span class="line"></span><br><span class="line">start_time = time()                 <span class="comment"># 调用1000000次tanh函数并统计时间</span></span><br><span class="line">result1 = list(map(tanh, data))</span><br><span class="line">end_time = time()</span><br><span class="line">print(end_time - start_time)</span><br></pre></td></tr></table></figure><p>运行该程序需要 1.39 秒，将上述函数改写成 C++，将其保存在 <code>mytanh.cpp</code> 中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> e = <span class="number">2.7182818284590452353602874713527</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mysinh</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - <span class="built_in">pow</span>(e, (<span class="number">-2</span> * x))) / (<span class="number">2</span> * <span class="built_in">pow</span>(e, -x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mycosh</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + <span class="built_in">pow</span>(e, (<span class="number">-2</span> * x))) / (<span class="number">2</span> * <span class="built_in">pow</span>(e, -x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mytanh</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mysinh(x) / mycosh(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>sinh, cosh, tanh</code>是 C++ 库函数，这里修改一下函数名。</p><h3 id="在-Cython-中声明该函数"><a href="#在-Cython-中声明该函数" class="headerlink" title="在 Cython 中声明该函数"></a>在 Cython 中声明该函数</h3><p>新建一个<code>fast_tanh.pyx</code> 文件，<code>.pyx</code> 是 Cython 代码的后缀名，文件内容如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># distutils: language = c++</span><br><span class="line"># cython: language_level = 3</span><br><span class="line"></span><br><span class="line">cdef extern from &quot;mytanh.cpp&quot;:</span><br><span class="line">    double mytanh(double x)</span><br><span class="line">    </span><br><span class="line">def fast_tanh(double x):</span><br><span class="line">    return mytanh(x)</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># distutils: language = c++</span><br><span class="line"># cython: language_level = 3</span><br></pre></td></tr></table></figure><p>是用于配置编译器的特殊注释，分说明了使用的是 C++ 和 Python3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cdef extern from &quot;mytanh.cpp&quot;:</span><br><span class="line">    double mytanh(double x)</span><br></pre></td></tr></table></figure><p>Cython 使用 <code>cdef extern from</code> 来声明一个在 C++ 中实现的函数。上述代码声明了 <code>mytanh</code> 函数，使其可以在 Cython中使用。</p><h3 id="在-Cython-中编写接口函数"><a href="#在-Cython-中编写接口函数" class="headerlink" title="在 Cython 中编写接口函数"></a>在 Cython 中编写接口函数</h3><p>虽然 <code>mytanh</code> 现在可以在 Cython 中直接调用了，但 Python 并不能直接调用该函数，因此还要声明一个接口函数，命名为 <code>fast_tahn</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fast_tanh(double x):</span><br><span class="line">    return mytanh(x)</span><br></pre></td></tr></table></figure><p>上述代码声明了一个接口函数，Cython 的语法与 Python 非常相似，若去掉形参中的 double 也是可行的，但若 Cython 知道参数的类型可以加速运行速度。Cython 支持大部分纯 Python 代码，因此可以在 Cython 中将 Python 的数据类型和 C++ 的数据类型相互转换，例如可以将 <code>vector</code> 转为 <code>numpy array</code>。若要使用 <code>vector</code> 类型，还需在开头加上 <code>from libcpp.vector cimport vector</code>。</p><h3 id="编写-setup-py"><a href="#编写-setup-py" class="headerlink" title="编写 setup.py"></a>编写 setup.py</h3><p><code>fast_tanh.pyx</code> 编写完后，需要编译后才能被 Python 调用，编译是通过 <code>setup.py</code> 进行的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(ext_modules=cythonize(Extension(</span><br><span class="line">    <span class="string">'fast_tanh'</span>,                            <span class="comment"># 生成的模块名称</span></span><br><span class="line">    sources=[<span class="string">'fast_tanh.pyx'</span>],              <span class="comment"># 要编译的文件</span></span><br><span class="line">    language=<span class="string">'c++'</span>,                         <span class="comment"># 使用的语言</span></span><br><span class="line">    include_dirs=[],                        <span class="comment"># gcc的-I参数</span></span><br><span class="line">    library_dirs=[],                        <span class="comment"># gcc的-L参数</span></span><br><span class="line">    libraries=[],                           <span class="comment"># gcc的-l参数</span></span><br><span class="line">    extra_compile_args=[],                  <span class="comment"># 附加编译参数</span></span><br><span class="line">    extra_link_args=[],                     <span class="comment"># 附加链接参数</span></span><br><span class="line">)))</span><br></pre></td></tr></table></figure><p>其他参数可以根据需要添加，如果你暂时还不知道这些参数有什么用，那么可以先空着。将上述代码保存到 setup.py 后，运行如下命令即可编译 Cython 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>需要注意，编译时的 Python 版本必须和调用时使用的 Python 版本相同。编译完成后，当前目录下会自动生成相应的 cpp 文件和 pyd 文件，在 Linux 上是 so 文件。</p><p>如果使用了 numpy 会在编译过程中看到警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION</span><br></pre></td></tr></table></figure><p>该警告可以忽略，因为 Cython 使用的是已经弃用的 Numpy API，不影响使用。</p><h3 id="在-Python-中调用-fast-tanh-函数"><a href="#在-Python-中调用-fast-tanh-函数" class="headerlink" title="在 Python 中调用 fast_tanh 函数"></a>在 Python 中调用 fast_tanh 函数</h3><p>完成了编译的步骤后，<code>fast_tanh</code>在 Python 中就和一个普通的 Python 模块一样，可以使用 import 来导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fast_tanh <span class="keyword">import</span> fast_tanh     <span class="comment"># 从fast_tanh.pyx中导入fast_tanh函数</span></span><br></pre></td></tr></table></figure><p>导入后，就可以在 Python 中像调用普通函数一样，直接使用 fast_tanh 函数了，完整代码如下，与之前的区别仅仅是把 tanh 替换成了 tanh，非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> fast_tanh <span class="keyword">import</span> fast_tanh</span><br><span class="line"></span><br><span class="line">data = [random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>)]    <span class="comment"># 生成随机数据</span></span><br><span class="line"></span><br><span class="line">start_time = time()              <span class="comment"># 计算并统计时间</span></span><br><span class="line">result = list(map(fast_tanh, data))</span><br><span class="line">end_time = time()</span><br><span class="line">print(end_time - start_time)     <span class="comment"># 输出运行时间</span></span><br></pre></td></tr></table></figure><p>运行上述代码共需 0.18 秒，可以看到，仅仅替换了一个 tanh 函数后性能提升了近 8 倍。如果有其他更复杂的操作，可以提升几十上百倍的性能。</p><h2 id="Python-调用-C-C-类"><a href="#Python-调用-C-C-类" class="headerlink" title="Python 调用 C/C++ 类"></a>Python 调用 C/C++ 类</h2><h3 id="编写一个-C-类"><a href="#编写一个-C-类" class="headerlink" title="编写一个 C++ 类"></a>编写一个 C++ 类</h3><p>知道如何调用一个 C/C++ 函数后，接下来继续调用一个 C/C++ 类。我们以一个简单的矩形类为例，假设我们在 C++ 中编写了一个矩形类。头文件 <code>Rectangle.h</code> 为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECTANGLE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECTANGLE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> shapes </span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> x0, y0, x1, y1;      <span class="comment">// 矩形对角线上的两个点坐标</span></span><br><span class="line">            Rectangle();</span><br><span class="line">            Rectangle(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1);</span><br><span class="line">            ~Rectangle();</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span>* width, <span class="keyword">int</span>* height)</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Rectangle.cpp</code> 中的实现为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"><span class="keyword">namespace</span> shapes &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Rectangle::Rectangle () &#123;&#125;</span><br><span class="line">    Rectangle::Rectangle (<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x0 = x0;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y0 = y0;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x1 = x1;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y1 = y1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    Rectangle::~Rectangle () &#123;&#125;</span><br><span class="line">    <span class="comment">// 获取矩形面积</span></span><br><span class="line">    <span class="keyword">int</span> Rectangle::getArea () &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;x1 - <span class="keyword">this</span>-&gt;x0) * (<span class="keyword">this</span>-&gt;y1 - <span class="keyword">this</span>-&gt;y0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取矩形的边长</span></span><br><span class="line">    <span class="keyword">void</span> Rectangle::getSize (<span class="keyword">int</span> *width, <span class="keyword">int</span> *height) &#123;</span><br><span class="line">        (*width) = x1 - x0;</span><br><span class="line">        (*height) = y1 - y0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移动矩形</span></span><br><span class="line">    <span class="keyword">void</span> Rectangle::move (<span class="keyword">int</span> dx, <span class="keyword">int</span> dy) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x0 += dx;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y0 += dy;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x1 += dx;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y1 += dy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Cython-中声明类"><a href="#在-Cython-中声明类" class="headerlink" title="在 Cython 中声明类"></a>在 Cython 中声明类</h3><p>接下来需要在 Cython 中编写一个接口。与前面调用 C++ 函数类似，使用 <code>cdef extern from</code> 来声明一个在 C++ 中实现的类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdef <span class="keyword">extern</span> from <span class="string">"Rectangle.h"</span> <span class="keyword">namespace</span> <span class="string">"shapes"</span>:</span><br></pre></td></tr></table></figure><p>若没有命名空间，则使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdef <span class="keyword">extern</span> from <span class="string">"Rectangle.h"</span></span><br></pre></td></tr></table></figure><p>将声明放在 <code>Rectangle.pxd</code> 文件中，<code>.pxd</code> 文件相当于 C++ 的 <code>.h</code> 文件，专门用于声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cdef extern from &quot;Rectangle.cpp&quot;:</span><br><span class="line">    pass</span><br><span class="line"># 用cdef声明类</span><br><span class="line">cdef extern from &quot;Rectangle.h&quot; namespace &quot;shapes&quot;:</span><br><span class="line">    cdef cppclass Rectangle:</span><br><span class="line">        Rectangle() except +</span><br><span class="line">        Rectangle(int, int, int, int) except +</span><br><span class="line">        int x0, y0, x1, y1</span><br><span class="line">        int getArea()</span><br><span class="line">        void getSize(int* width, int* height)</span><br><span class="line">        void move(int, int)</span><br></pre></td></tr></table></figure><p>由于 <code>.h</code> 文件中没有实现矩形类，还要使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cdef extern from &quot;Rectangle.cpp&quot;:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>包含 <code>Rectangle.cpp</code> 中的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdef cppclass Rectangle:</span><br></pre></td></tr></table></figure><p>声明了一个在 C++ 中定义的类，其他函数的声明与前面调用函数类似。在构造函数后加上 <code>except +</code> 可以使 Python 能够捕获到在构造函数中发生的异常，若不加 <code>except +</code>，则 Cython 不会处理构造函数中发生的异常。</p><h3 id="在-Cython-中编写接口类"><a href="#在-Cython-中编写接口类" class="headerlink" title="在 Cython 中编写接口类"></a>在 Cython 中编写接口类</h3><p>与前面相同，虽然现在 C++ 中的类在 Cython 中可以直接访问了，但在 Python 中并不能访问。因此，我们还需要实现一个接口类，用于在 Python 中调用。注意，C++ 类的声明放在 <code>.pxd</code> 文件中, 接口类的实现放在 <code>.pyx</code> 中。<code>PyRectangle.pyx</code>为 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># distutils: language = c++</span><br><span class="line">from Rectangle cimport Rectangle</span><br><span class="line"></span><br><span class="line"># 接口类</span><br><span class="line"># Python可以直接访问接口类，接口类可以直接访问C++类</span><br><span class="line">cdef class PyRectangle:</span><br><span class="line">    cdef Rectangle c_rect    # 存储C++对象</span><br><span class="line">    def __cinit__(self, int x0, int y0, int x1, int y1):</span><br><span class="line">        self.c_rect = Rectangle(x0, y0, x1, y1)</span><br><span class="line">    def get_area(self):</span><br><span class="line">        return self.c_rect.getArea()</span><br><span class="line">    def get_size(self):</span><br><span class="line">        cdef int width, height</span><br><span class="line">        self.c_rect.getSize(&amp;width, &amp;height)</span><br><span class="line">        return width, height</span><br><span class="line">    def move(self, dx, dy):</span><br><span class="line">        self.c_rect.move(dx, dy)</span><br></pre></td></tr></table></figure><p>现在，<code>PyRectangle</code> 类就像普通的 Python 类一样可以直接在 Python 中调用了。</p><p>另外，Cython 也支持使用 <code>new</code> 创建 C++ 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __cinit__(self, int x0, int y0, int x1, int y1):</span><br><span class="line">    self.c_rect = new Rectangle(x0, y0, x1, y1)</span><br></pre></td></tr></table></figure><p>与 C++ 相同，使用了 <code>new</code> 就必须使用 <code>delete</code> 释放内存，否则会造成内存泄漏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __dealloc__(self):    # 析构函数</span><br><span class="line">    del self.c_rect       # 释放内存</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>setup.py</code> 内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(ext_modules=cythonize(Extension(</span><br><span class="line">    <span class="string">'PyRectangle'</span>,                          <span class="comment"># 生成的模块名称</span></span><br><span class="line">    sources=[<span class="string">'PyRectangle.pyx'</span>],            <span class="comment"># 要编译的文件</span></span><br><span class="line">    language=<span class="string">'c++'</span>,                         <span class="comment"># 使用的语言</span></span><br><span class="line">    include_dirs=[],                        <span class="comment"># gcc的-I参数</span></span><br><span class="line">    library_dirs=[],                        <span class="comment"># gcc的-L参数</span></span><br><span class="line">    libraries=[],                           <span class="comment"># gcc的-l参数</span></span><br><span class="line">    extra_compile_args=[],                  <span class="comment"># 附加编译参数</span></span><br><span class="line">    extra_link_args=[],                     <span class="comment"># 附加链接参数</span></span><br><span class="line">)))</span><br></pre></td></tr></table></figure><p>使用 <code>python setup.py build_ext --inplace</code> 编译</p><h3 id="在-Python-中调用接口类"><a href="#在-Python-中调用接口类" class="headerlink" title="在 Python 中调用接口类"></a>在 Python 中调用接口类</h3><p>现在，<code>PyRectangle</code> 类就和普通的 Python 类一样，可以直接被 Python 调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PyRectangle</span><br><span class="line"></span><br><span class="line">x0, y0, x1, y1 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">rect = PyRectangle.PyRectangle(x0, y0, x1, y1)</span><br><span class="line">print(rect.get_area)</span><br></pre></td></tr></table></figure><p>运行该程序，输出了矩形面积，调用成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Cython 调用 C/C++ 的<strong>原理</strong>是：</p><p>Python -&gt; Cython 接口 -&gt; C/C++</p><p>访问 C++ 都是通过 Cython 接口完成的。</p><p>若还想了解更多，可以阅读 Cython <a href="https://www.bookstack.cn/read/cython-doc-zh/README.md" target="_blank" rel="noopener">文档</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.bookstack.cn/read/cython-doc-zh/README.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/cython-doc-zh/README.md</a></li><li><a href="https://www.youtube.com/watch?v=D9RlT06a1EI&amp;t=45s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=D9RlT06a1EI&amp;t=45s</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙特卡洛树搜索 MCTS 入门</title>
      <link href="/posts/2019/1028154602/"/>
      <url>/posts/2019/1028154602/</url>
      
        <content type="html"><![CDATA[<p>【内容简介】蒙特卡洛树搜索(Monte Carlo Tree Search) ，是一种寻找最优决策的方法。</p><a id="more"></a><p><strong>蒙特卡洛树搜索</strong>(Monte Carlo Tree Search) 是一种寻找最优决策的方法，在AlphaGo中被运用，其主要分为四步：<strong>选择</strong>(Selection)，<strong>拓展</strong>(Expansion)，<strong>模拟</strong>(Simulation)，<strong>反向传播</strong>(Backpropagation)。 本文以<strong>井字棋</strong>为例对这一方法进行介绍。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>在棋类问题中，MCTS 使用一个<strong>节点</strong>来表示一个<strong>游戏状态</strong>，换句话说，每一个节点都对应着井字棋中的一种情况。假设现在井字棋的棋盘上只有中间一个棋子，我们用一个节点表示这个游戏状态，这个节点就是下图中的根节点。这时，下一步棋有 8 种下法，所以对应的，这个根节点就有 8 个子节点(图中只画出了 3 个)。<strong>下完一步后，游戏还没有结束，继续按照刚才的方法，这些子节点又有子节点，所有的井字棋游戏状态都可以被这样表示，于是它们就构成了一个树。</strong>对于围棋或者其他更复杂的棋类也是一样，只不过这个树会更大、更复杂。蒙特卡洛树搜索就是要在这样一个树中搜索出最可能获胜下一步，即搜索在当前局面下，在哪个位置下棋最有可能获胜。</p><img src="/posts/2019/1028154602/节点.png" alt="节点" style="zoom:33%;"><h3 id="节点的两个属性"><a href="#节点的两个属性" class="headerlink" title="节点的两个属性"></a>节点的两个属性</h3><p>在蒙特卡洛树搜索中，我们将节点记作 $v$，在搜索过程中需要记录节点的访问次数和累计奖励，它们的表示符号如下：</p><ol><li>$N(v)$：节点 $v$ 的<strong>访问次数</strong>，节点在搜索过程中被访问多少次，该值就是多少。</li><li>$Q(v)$：节点 $v$ 的<strong>累计奖励</strong>，即节点在反向传播过程中获得的所有奖励(reward)求和。</li></ol><p>所谓的<strong>奖励(reward)</strong>是一个数值，游戏结束时若获胜，奖励为 1，若失败，奖励为 0。</p><h2 id="搜索过程"><a href="#搜索过程" class="headerlink" title="搜索过程"></a>搜索过程</h2><p>那么，给定当前游戏状态，如何获得下一步的最佳下法呢？对于井字棋来说，当然可以在整个决策树中遍历所有可能性，直接找出最优策略。但若换成围棋等复杂的棋类，遍历的方法是显然不可行的，这时就需要在决策树中有选择地访问节点，并根据现有的有限信息做出最优决策。</p><p>在介绍下面的搜索过程之前，我们首先要知道：蒙特卡洛树搜索搜的是什么？换句话说，假如我们先把 MCTS 看成一个黑盒子，那么它的输入和输出分别是什么？</p><p><strong>输入</strong>：一个游戏状态</p><p><strong>输出</strong>：下一步下棋的位置</p><p><strong>也就是说，给 MCTS 一个棋局，它就告诉你下一步该怎么走。</strong>知道了输入输出分别是什么后，我们再来看看从输入到输出这中间，MCTS 到底做了什么。</p><h3 id="选择-Selection"><a href="#选择-Selection" class="headerlink" title="选择(Selection)"></a>选择(Selection)</h3><p><strong>由于遍历的方法不可行，MCTS 需要有选择地访问节点，这就是选择阶段。</strong>从根节点(就是输入)出发，根据一定的策略，向下选择一个要访问的节点，若被选择的节点未被访问过，则执行扩展；若被选择的节点已被访问，则继续向下选择节点，直到遇见未被访问的节点并执行扩展，或遇见终止节点(游戏结束)，无需执行扩展，而直接执行反向传播。扩展和反向传播是为了积累在选择中获得的信息。</p><p>选择的策略由该公式确定，对当前节点的每个子节点计算如下公式，并选择计算结果最大的节点。<br>$$<br>\underset{v’\in ,,\text{children of }v}{arg\max}\frac{Q\left( v’ \right)}{N\left( v’ \right)}+c\sqrt{\frac{\text{2}\ln N\left( v \right)}{N\left( v’ \right)}}<br>$$<br>其中， $v$ 表示父节点，$v’$ 表示子节点。$c$ 是一个常数，用于权衡<strong>探索 (Exploration)</strong> 与<strong>利用 (Exploitation)</strong>。探索是指：其他没有访问过的节点可能会获得更高的奖励，所以要访问这些节点；而利用是指：多访问在当前已知信息下，平均奖励最高的节点，因为大概率有好结果。$c$ 越大，就越偏向于<strong>探索</strong>；$c$ 越小，就越偏向于<strong>利用</strong>。</p><h3 id="扩展-Expansion"><a href="#扩展-Expansion" class="headerlink" title="扩展 (Expansion)"></a>扩展 (Expansion)</h3><p>MCTS 在搜索的过程中是有选择地访问节点，并把所有访问过的节点构建成一个树。扩展非常简单，就是把<strong>选择</strong>步骤中遇到的未访问节点添加到现有的树中。</p><h3 id="模拟-Simulation"><a href="#模拟-Simulation" class="headerlink" title="模拟 (Simulation)"></a>模拟 (Simulation)</h3><p>模拟是一个粗略获取信息的过程。从被扩展的节点开始，对游戏进行模拟，也就是在棋盘上随机下棋，直到<strong>游戏结束</strong>。若此时游戏胜利，则<strong>奖励 (Reward)</strong> 为 $1$；若游戏失败，<strong>奖励</strong>为 $0$。这里的奖励将会在<strong>反向传播</strong>中用到。</p><p>注：在其他应用中，<strong>奖励</strong>也可是其他值。</p><h3 id="反向传播-Backpropagation"><a href="#反向传播-Backpropagation" class="headerlink" title="反向传播 (Backpropagation)"></a>反向传播 (Backpropagation)</h3><p>反向传播是将在<strong>模拟</strong>中得到的信息更新的过程。</p><p>将奖励记作 $R$，对当前节点，及其所有父节点 $v$，都执行以下操作。<strong>即，更新访问次数，对奖励进行累加。</strong><br>$$<br>N(v)=N(v)+1  \\<br>Q(v)=Q(v)+R<br>$$<br>我们再回头看看<strong>选择</strong>步骤中的公式<br>$$<br>\underset{v’\in ,,\text{children of }v}{arg\max}\frac{Q\left( v’ \right)}{N\left( v’ \right)}+c\sqrt{\frac{\text{2}\ln N\left( v \right)}{N\left( v’ \right)}}<br>$$<br>可以看到，式中第一项其实就是该节点在前面的过程中获得的平均奖励，自然该值越大，选择该节点就越有可能获胜。那么为什么要加上第二项呢？<strong>这就涉及到探索与利用的权衡。</strong></p><p>我们不能只选择已访问过的节点中平均奖励最大的节点，一些访问次数较少的、甚至没有访问过的节点它们可能获得比已探索的节点更丰厚的回报，因此也要适当地在未知的节点进行探索。<strong>这就是第二项的含义，当该节点访问次数占父节点次数的比例越小时，该值越大，代表我们越要在此节点进行探索。于是就不难理解$c$用于是权衡探索与利用的常数了。</strong></p><p>这就是<strong>上限置信区间算法 (Upper Confidence Bound )</strong>，简称UCT算法。</p><h3 id="搜索过程展示"><a href="#搜索过程展示" class="headerlink" title="搜索过程展示"></a>搜索过程展示</h3><p>MCTS 其实就是一个不断重复上述四个步骤的过程。</p><p>看完了这四个步骤，我们再来看一张动图帮助理解。图中节点内数字表示 $Q(v)/N(v)$</p> <div align="center">  <img src="/posts/2019/1028154602/搜索过程.gif" alt="搜索过程" width="400"></div><h2 id="搜索结束"><a href="#搜索结束" class="headerlink" title="搜索结束"></a>搜索结束</h2><p>MCTS 的整个过程就是这样，那么什么时候结束呢？一般设置以下两个终止条件。</p><ol><li>设置最大根节点搜索次数，达到该次数后结束搜索。</li><li>设置最大搜索时间，超过时间后结束搜索。</li></ol><p><strong>结束后，就输出当前状态下，下一步下棋的位置。</strong></p><h2 id="选择最佳节点"><a href="#选择最佳节点" class="headerlink" title="选择最佳节点"></a>选择最佳节点</h2><p>搜索结束后，如何选择下一步下棋的位置呢？</p><p><strong>不是选择 $Q$ 最大的节点，也不是选择平均奖励最大的节点，而是选择访问次数最多的节点。这样，就得到了当前游戏状态(根节点)下的一个选择。</strong>或者，也可以将访问次数归一化，作为下一步的概率。</p><p>如果下一步还要进行决策，则又要将下一步的状态作为根节点，重新执行 MCTS，并选择访问次数最多的节点作为下一步的策略。(上一步的搜索结果可以保留)</p><p>以上只是 MCTS 的简单介绍，想更详细的了解 MCTS 可以参考论文<a href="http://www.researchgate.net/publication/235985858_A_Survey_of_Monte_Carlo_Tree_Search_Methods" target="_blank" rel="noopener">A Survey of Monte Carlo Tree Search Methods</a></p><p>另外，Github 上也已经有 MCTS 的 Python 实现源码 <a href="https://github.com/pbsinclair42/MCTS。文档比较全，有详细的例子。" target="_blank" rel="noopener">https://github.com/pbsinclair42/MCTS。文档比较全，有详细的例子。</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mcts </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
